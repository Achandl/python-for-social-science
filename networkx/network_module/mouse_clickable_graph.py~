# -*- coding: utf-8 -*-
"""mouse_clickable_graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CuuFmTG270UwRI-8ZRATpMwNZx5Imyey
"""

import math

import pylab
import matplotlib
import networkx as nx
import matplotlib.pyplot as plt
import urllib.request

class AnnoteFinder:
  """
  callback for matplotlib to display an annotation when points are clicked on.  The
  point which is closest to the click and within xtol and ytol is identified.
    
  Register this function like this:
    
  scatter(xdata, ydata)
  af = AnnoteFinder(xdata, ydata, annotes)
  connect('button_press_event', af)
  """

  def __init__(self, xdata, ydata, annotes, axis=None, xtol=None, ytol=None):
    self.data = zip(xdata, ydata, annotes)
    if xtol is None:
      xtol = ((max(xdata) - min(xdata))/float(len(xdata)))/2
    if ytol is None:
      ytol = ((max(ydata) - min(ydata))/float(len(ydata)))/2
    self.xtol = xtol
    self.ytol = ytol
    if axis is None:
      self.axis = pylab.gca()
    else:
      self.axis= axis
    self.drawnAnnotations = {}
    self.links = []

  def distance(self, x1, x2, y1, y2):
    """
    return the distance between two points
    """
    return math.hypot(x1 - x2, y1 - y2)

  def __call__(self, event):
    if event.inaxes:
      clickX = event.xdata
      clickY = event.ydata
      if self.axis is None or self.axis==event.inaxes:
        annotes = []
        for x,y,a in self.data:
          if  clickX-self.xtol < x < clickX+self.xtol and  clickY-self.ytol < y < clickY+self.ytol :
            annotes.append((self.distance(x,clickX,y,clickY),x,y, a) )
        if annotes:
          annotes.sort()
          distance, x, y, annote = annotes[0]
          self.drawAnnote(event.inaxes, x, y, annote)
          for l in self.links:
            l.drawSpecificAnnote(annote)

  def drawAnnote(self, axis, x, y, annote):
    """
    Draw the annotation on the plot
    """
    if (x,y) in self.drawnAnnotations:
      markers = self.drawnAnnotations[(x,y)]
      for m in markers:
        m.set_visible(not m.get_visible())
      self.axis.figure.canvas.draw()
    else:
      #t = axis.text(x,y, "(%3.2f, %3.2f) - %s"%(x,y,annote), )
      t = axis.text(x,y, "%s"%(annote,), bbox = dict(boxstyle = 'round,pad=0.15', fc = 'salmon', alpha = .75))
      m = axis.scatter([x],[y], marker='d', c='r', zorder=100)
      self.drawnAnnotations[(x,y)] =(t,m)
      self.axis.figure.canvas.draw()

  def drawSpecificAnnote(self, annote):
    annotesToDraw = [(x,y,a) for x,y,a in self.data if a==annote]
    for x,y,a in annotesToDraw:
      self.drawAnnote(self.axis, x, y, a)


def url_fetch_networkx_graph (url):
    with urllib.request.urlopen(url) as filehandle:
         G = nx.read_gml(filehandle)
    return G


############################################################
############################################################
##
##
##
##
##
############################################################
############################################################
      

def linkAnnotationFinders(afs):
  for i in range(len(afs)):
    allButSelfAfs = afs[:i]+afs[i+1:]
    afs[i].links.extend(allButSelfAfs)

print('Defined')

import os.path

github_networks_data = 'https://raw.githubusercontent.com/gawron/python-for-social-science/master/networks/'
ak_url = os.path.join(github_networks_data, 'anna.gml')
ak = url_fetch_networkx_graph(ak_url)

ak_pos = nx.spring_layout(ak,scale=1.0,iterations=500)
ak_il = ak_pos.items()

labels = [label for (label,coords) in ak_il]
X = [x for (label,(x,y)) in ak_il]
Y = [y for (label,(x,y)) in ak_il]


#nx.draw_networkx_edges(ak,ak_pos)
plt.figure(figsize=(11,11))
nx.draw_networkx(ak,ak_pos, with_labels=False,node_size=20,node_color="red") 

af =  AnnoteFinder(X,Y, labels)
pylab.connect('button_press_event', af)

lm_pos = nx.spring_layout(lm,scale=1.0)
lm_il = list(lm_pos.items())

labels = [label for (label,coords) in lm_il]
X = [x for (label,(x,y)) in lm_il]
Y = [y for (label,(x,y)) in lm_il]
     

# An alternative is to draw just the edges.  The nodes are still clickable, but harder to find.
#nx.draw_networkx_edges(ego_network,ego_pos)
nx.draw_networkx(lm,lm_pos, with_labels=False,node_size=20,node_color="lightgray") 
af = AnnoteFinder(X,Y, labels)
pylab.connect('button_press_event', af)